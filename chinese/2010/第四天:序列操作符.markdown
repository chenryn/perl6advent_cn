## 2010 年 Perl6 圣诞月历(四)序列操作符

去年就有一个[简单的序列操作](http://perl6advent.wordpress.com/2009/12/23/day-23-lazy-fruits-from-the-gather-of-eden/)的文章，一年过去了，需要稍微调整一下，还是可以继续用的：

    my @even-numbers  := 0, 2 ... *;    #算术序列
    my @odd-numbers   := 1, 3 ... *;
    my @powers-of-two := 1, 2, 4 ... *; # 几何序列

现在在Rakudo里这么写：

    > my @powers-of-two := 1, 2, 4 ... *; 1;
    1
    > @powers-of-two[^10]
    1 2 4 8 16 32 64 128 256 512

(注释：说明一下为什么定义数组后面还加了一个 ”1;” —— 因为这里用的是 Rakudo-REPL，这样不用命令行参数也能查看最后一个表达式的运行效果。但是这个 `@powers-of-two` 是一个无限长的列表，可不能让他显示 …… 所以加一个 "1;" ，让 REPL 打印 1 就好了~~)

当正式使用的时候，我们需要裁剪一下列表，免得rakudo花太长时间在无限循环上==!比如这里我就是直接请求了[^10]，即前十个元素。需要注意的是，当数组绑定在一个无限序列上的时候，这些曾经计算过的元素就从此被记下了，这是一种快速 [memoization](http://justrakudoit.wordpress.com/2010/08/28/the-serial-operator-and-memoization/) （译者注：memoization 找不到翻译，理解成函数返回值的缓存吧）的形式。

在生成无限序列的时候，序列操作符 `...` 是一种很有用的工具。上面的例子就小小的演示了一下他的用法。给他一个数字，他从这个数字开始计数（除非是序列末尾的数反而更小，那就会倒计数）；再给一个数字，组成序列，根据这两个数计算下一个数；最后给第三个数字，用来检查前面计算的结果，看看序列是算术的还是几何的。然后一直算下去……

当然，很多序列既不是算术也不是几何排序的。这种情况下，你就得自己提供一个 sub 来生成序列的下一个数字了：

    > my @Fibonacci := 0, 1, -> $a, $b { $a + $b } ... *; 1;
    1
    > @Fibonacci[^10]
    0 1 1 2 3 5 8 13 21 34

嗯，这段代码 `-> $a,$b{$a+$b}` 有个尖块就是个 lambda 函数，给两个参数，返回他们的和。序列操作符分析函数需要几个参数，然后从序列的队尾取出来相应数量，计算结果作为下一个数字。依此循环，一直下去~

停！其实也可以不一直下去——上面所有的例子里，序列的右边都是空的，这个意思就是“没有终止条件”。也就是说，如果你在序列的最右端加上一个数字，序列就会在到达这个数字的时候停下来了：

    > 1, 1.1 ... 2
    1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2
    > 1, 1.1 ... 2.01
    ... Rakudo spins its wheels, because this is an infinite lis ...
    > (1, 1.1 ... 2.01)[^14]
    1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 2.1 2.2 2.3

上面三个定义，第一个自然终止了；第二个 rakudo 在后台无限循环，不显示在终端；第三个定义前14个元素，以便观察效果。

不过实际运用中，你做浮点型数值运算的时候，很可能出现增加 0.1 却溢出 2 的危险情况。在 Perl6 里，使用了分数来尽可能避免这种情况。不过传统观念还是非常坚定的，所以如果你要找到小于 10000 的斐波那契数，那提前预知最后终止处的数字可就难了~~不过幸运的是，除了用 sub 定义下一个数字，一样也可以用 sub 定义最后一个数字！如下：

    > 0, 1, -> $a, $b { $a + $b } ... -> $a { $a > 10000 };
    0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946

这次的小尖块 `->$a{$a>10000}` 里带了一个参数，在变量大于 10000 的时候返回为真。嗯，正是我们想要的！

但是我们要的是小于 10000 的，这里还多出来一个，所以还要稍微再改改：

    > 0, 1, -> $a, $b { $a + $b } ...^ -> $a { $a > 10000 };
    0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765

把 `...` 改成 `...^` 就可以了。这个意思就是测试条件为真的那个元素不包含在返回结果内~

好了，又有两个注释：上面的写法其实在 perl6 里属于很累赘的写法。我在这里没法写太多关于闭包的东西，不过去年似乎有过些解释。用闭包可以很简单的写成这个样子：
    
    > 0, 1, * + * ...^ * > 10000;
    0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765

至于你是不是看得惯这种简洁，那就不是我能管的了，记住 TIMTOWTDI。

同样，序列操作符的左边，也可以是任何列表，包括无限序列本身。这样你可以很简单的用一个中断块搞定一个已有的无线序列的截取：

    > my @Fibonacci := 0, 1, * + * ... *; 1;
    1
    > @Fibonacci ...^ * > 10000
    0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
    > @Fibonacci[30]
    832040

（第三次操作只是为了证明在第二次操作获取列表后，原数组没有变化，还是可以得到大于 10000 的元素的）

好了，所有这些内容，都只是给大家泛泛的展示一下序列能干什么。详细的信息，请查看 Perl6 规范中序列操作符的内容（注意：描述的功能还没有完全实现。这玩意儿相当
的复杂！）。

最后的最后，序列操作符并没有被约束在数字操作上！只要你想，你可以创建任何类型的序列……好了，我要走了，准备下一个圣临月历内容去~~

