## 2010 年 Perl6 圣诞月历(五)perl语法怎样做到你想做的

圣临月第五天，您或许有些失望没能看到 Perl6 酷呆了的新玩法~这次会是直观的解释一些编程语言的运行原理。

作为样例，先说下面这两行吧：

      say 6 / 3;
        say 'Price: 15 Euro' ~~ /\d+/;

嗯，两行代码的运行结果分别是 2 和 15。相信这对 perl 程序员来说没什么可奇怪的。但你再细看看，两行都有斜杠`/`，却为了完全不一样的目的，第一个是数值运算，第二
个是正则匹配。

Perl 怎么知道一个 `/` 号意味着什么？这当然不是简单的看 `/` 号后面的文本来决定，因为正则表达式可以看起来跟普通代码一样。

答案是：Perl 会持续跟踪他的预期。Perl 预期中最重要的两样东西就是：词和操作符。

一个词可以是像 23 或者 str 这样的文字。当解释器发现这样一个文字，然后后面就会是一个语句的结束（即分号`;`），或者一个操作符像 +/\* 等等。过了这个操作符，解
释器又开始预期下一个词。

其实这就是问题的答案了：当解释器预期为词的时候，斜线 `/` 就代表正则表达式的开始；当预期为操作符的时候，斜线 `/` 就代表数字的除法运算。

这种做法造成了深远的后果。子函数运行可以不加括号，而在函数名后面，perl 预期一个词开端的参数列表。另一方面，类型名必须跟在操作符后面，所以，所有的类型名必
须在解析时就是已知的。

这样，很多字符都可以重复使用在不同的语法环境下了。
