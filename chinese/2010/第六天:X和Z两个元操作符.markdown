## 2010 年 Perl6 圣诞月历(六)X和Z两个元操作符

Perl6 中一个新的想法就是元操作符。一个操作符与另一个普通操作符结合到一起，以改变操作符的行为。在本文中，我们只介绍这些元操作符中的 `X` 和 `Z`。

`X` 操作符大家应该已经熟悉他在交缀组合中的运用了——也就是把每个元素都提取组合一遍：

    > say ((1, 2) X ('a', 'b')).perl
    ((1, "a"), (1, "b"), (2, "a"), (2, "b"))

不过，这个中缀操作符 `X`，其实只是元操作符 `X` 与列表连接操作符 `,` 的结合体的简写而已。也就是说，你完全可以完整的写成这个样子：

    > say ((1, 2) X, (10, 11)).perl
    ((1, 10), (1, 11), (2, 10), (2, 11))

那么把 `X` 和其他操作符写一块会怎么样呢？我们来试试中缀操作符 `+` 吧：

    > say ((1, 2) X+ (10, 11)).perl
    (11, 12, 12, 13)

哈哈，你看，返回的不是一个个元素组成的列表，操作符加上了新的效果，不再返回列表而是直接返回加法的和了！

这个适用于你能用的各种操作符。比如字符串连接中缀操作符 `~`：

    > say ((1, 2) X~ (10, 11)).perl
    ("110", "111", "210", "211")

甚至数值比较操作符 `==`：

    > say ((1, 2) X== (1, 1)).perl
    (Bool::True, Bool::True, Bool::False, Bool::False)

嗯，然后本文还要讲解的是 `Z` 操作符。希望你们已经了解过这个操作符是干嘛滴啦。如果您是一位 Haskell 程序员，并且把中缀操作符 `Z` 理解成 `zip` 函数，那么元操作符 `Z`，就是 `zipWith` 函数了。

    > say ((1, 2) Z, (3, 4)).perl
    ((1, 3), (2, 4)#41;
    > say ((1, 2) Z+ (3, 4)).perl
    (4, 6)
    > say ((1, 2) Z== (1, 1)).perl
    (Bool::True, Bool::False)

`Z` 操作符，会按照相同的次序，从每个列表里取出每一个元素，同时操作第一个、第二个、第三个……直到某个列表结束。

而且 `Z` 操作符可以作用于无限序列，它会一直跑下去。而 `X` 操作符只能处理左侧无限的序列。

我在写本文的时候，Rakudo 处理中缀操作符 `Z` 和 `Z` 时还出了个 bug：前者返回了一个扁平的结果列表，后者才是对的。

这些元操作符在对多个列表的各个元素进行操作的时候有着重大的作用。通过 `Z` 索引关联的方式，或者通过 `X` 插件所有的组合……

比如你有 `@key` 和 `@value` 两个数组，要组合成一个 hash ，怎么做？容易！

    my %hash = @keys Z=> @values;

又或者你想并行遍历两个列表：

    for @a Z @b -> $a, $b { ... }

甚至三个列表：

    for @a Z @b Z @c -> $a, $b, $c { ... }

又或者当你掷 3 个 10 面骰子的时候，你想列出所有可能的骰子总数：

    my @d10 = 1 ... 10;
    my @scores = (@d10 X+ @d10) X+ @d10;

如果你想找到一些更实际的运用，可以看看[Sudoku.pm数独计算模块](https://github.com/moritz/perl6-Sudoku/blob/master/lib/Sudoku.pm)。
