Perl6 对函数有很好的支持。Perl6 令人惊叹的把函数声明包起来，让你可以用各种方法来定义一个函数又不丢失任何特性。你可以定义参数类型、可选参数、命名参数，甚至在子句里也可以。如果我不知道更好的理由的话，我可能都在怀疑这是不是在补偿 Perl5 里那个相当基本的参数处理（咳咳 ，`@_`，你懂的）。

除开这些，Perl6 也允许你定义没有命名的函数。

    sub {say "lol, I'm so anonymous!" }

这有什么用？你不命名它，就没法调用它啊，对不？错！

你可以保存这个函数到一个变量里。或者从另一个函数里 return 这个函数。或者传参给下一个函数。事实上，当你不命名你的函数的时候，你随后要运行什么代码就变得非常清晰了。就像一个可执行的" todo "列表一样。

当然，Perl5 也有匿名函数。甚至语法也完全一样。事实上所有的知名语言都有匿名函数，额，我说的知名参见 Wikipedia 的这个["清单"](https://en.wikipedia.org/wiki/Anonymous_function#List_of_languages)。额，看起来得除掉古老的 C 语言和 Pascal，已经似乎很新但是笨拙的 Java 。“ Java 8 计划加入”。哈哈，Java 加油啊~连 C++ 都有呢！

匿名函数有多重要？非常！在 1930 年代，图灵表示所有的计算机流程可以用一个预定程序的机器模拟。看起来就像一个录音机在一个很长很长的磁带上读写（也就是图灵机）。与此同时，大西洋另一边，邱奇表示所有的计算机流程可以用匿名函数来模拟。不需要图灵的那个磁带录音机（也就是 Lambda 演算）。整个都优雅极了。

后来的语言像 Lisp 和 Scheme，都严重依赖匿名函数，把它作为语言中的关键组件。而最近一个杂凑的叫 JavaScript 的语言，也同样严重依赖匿名函数。在我们忙着上网的时候，这家伙已经接管了整个世界。

好了，暂停。现在让我们说说匿名函数可以给我们做点什么。在 Perl6 里它看起来会是什么样子呢？

嗯，就用最著名的排序来做例子吧。你可能想象 Perl6 有一个 `sort_lexicographically` 函数和一个 `sort_numberically` 函数。不过其实没有。只有一个 `sort` 函数。当你需要具体用某种形式的排序时，你就可以传递一个匿名函数给 `sort` 。

    my @sorted_words = @words.sort({ ~$_ });
    my @sorted_numbers = @numbers.sort({ +$_ });

（从技术上来说，这是块，不是函数。不过如果你不打算在里面使用 `return` 的话，差异不大。）

当然你可以做的比这两个排序办法多多了。你可以通过鞋子大小排序，或者最大地面速度，或者自燃可能性的降序等等。因为你可以把任何逻辑作为一个参数传递进去。面向对象的教徒们对这种模式可非常自豪，还专门命名为“依赖注入”。

想想看，`map` 、 `grep` 和 `reduce` 都很依赖这种函数传递。我们有时候把这种传递函数给函数的做法叫“高阶编程”，好像这是某些高手的特权似的。但其实这是一个非常有用而且可以普通使用的技能。

上面的示例都是在当前执行时就运行函数了。其实这里没什么限制。我们可以创建函数，然后稍后再运行：

    sub make_surprise_for($name) {
        return sub { say "Sur-priiise, $name!" };
    }
    
    my $reveal_surprise = make_surprise_for("Finn");    # 目前什么都没发生
    # 等着
    # 继续等着
    # 等啊等啊等啊
    $reveal_surprise();        # "Sur-priiise, Finn!"

`$reveal_surpirse` 里的函数记住了 `$name` 变量值，虽然原始函数是在很早之前传递进去的参数。棒极了！这个效果就叫在 `$name` 变量上闭合的匿名函数。不过这里可没什么技术 -- 反正很棒就是了。

事实上，如果放在其他主要存储机制比如数组和散列旁边再看匿名函数本身，这感觉是很自然的事情。所有这些都可以存储在变量里，作为参数传递或者从函数里返回。一个匿名数组允许你保存序列给以后调用。一个匿名散列允许你存储映射给以后调用。一个匿名函数允许你存储计算或者行为给以后调用。

本月晚些时候，我会写篇介绍怎样通过 Perl6 的动态域来创建漂亮的 DSL-y 接口。我们可以看到匿名函数在那里是怎么发挥作用的。
